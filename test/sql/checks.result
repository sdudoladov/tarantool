env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd("push filter ".."'\\.lua.*:[0-9]+: ' to '.lua...\"]:<line>: '")
---
- true
...
engine = test_run:get_cfg('engine')
---
...
_ = box.space._session_settings:update('sql_default_engine', {{'=', 2, engine}})
---
...
--
-- gh-3272: Move SQL CHECK into server
--
-- Until Tarantool version 2.2 check constraints were stored in
-- space opts.
-- Make sure that now this legacy option is ignored.
opts = {checks = {{expr = 'X>5'}}}
---
...
format = {{name = 'X', type = 'unsigned'}}
---
...
t = {513, 1, 'test', 'memtx', 0, opts, format}
---
...
s = box.space._space:insert(t)
---
...
_ = box.space.test:create_index('pk')
---
...
-- Invalid expression test.
box.space._ck_constraint:insert({513, 'CK_CONSTRAINT_01', false, 'SQL', 'X><5', true})
---
- error: 'Failed to create check constraint ''CK_CONSTRAINT_01'': Syntax error at
    line 1 near ''<'''
...
-- Non-existent space test.
box.space._ck_constraint:insert({550, 'CK_CONSTRAINT_01', false, 'SQL', 'X<5', true})
---
- error: Space '550' does not exist
...
-- Pass integer instead of expression.
box.space._ck_constraint:insert({513, 'CK_CONSTRAINT_01', false, 'SQL', 666, true})
---
- error: 'Tuple field 5 (code) type does not match one required by operation: expected
    string, got unsigned'
...
-- Deferred CK constraints are not supported.
box.space._ck_constraint:insert({513, 'CK_CONSTRAINT_01', true, 'SQL', 'X<5', true})
---
- error: Tarantool does not support deferred ck constraints
...
-- The only supported language is SQL.
box.space._ck_constraint:insert({513, 'CK_CONSTRAINT_01', false, 'LUA', 'X<5', true})
---
- error: Unsupported language 'LUA' specified for function 'CK_CONSTRAINT_01'
...
-- Check constraints LUA creation test.
box.space._ck_constraint:insert({513, 'CK_CONSTRAINT_01', false, 'SQL', 'X<5', true})
---
- [513, 'CK_CONSTRAINT_01', false, 'SQL', 'X<5', true]
...
box.space._ck_constraint:count({})
---
- 1
...
box.execute("INSERT INTO \"test\" VALUES(5);")
---
- null
- 'Check constraint failed ''CK_CONSTRAINT_01'': X<5'
...
box.space.test:insert({5})
---
- error: 'Check constraint failed ''CK_CONSTRAINT_01'': X<5'
...
box.space._ck_constraint:replace({513, 'CK_CONSTRAINT_01', false, 'SQL', 'X<=5', true})
---
- [513, 'CK_CONSTRAINT_01', false, 'SQL', 'X<=5', true]
...
box.execute("INSERT INTO \"test\" VALUES(5);")
---
- row_count: 1
...
box.execute("INSERT INTO \"test\" VALUES(6);")
---
- null
- 'Check constraint failed ''CK_CONSTRAINT_01'': X<=5'
...
box.space.test:insert({6})
---
- error: 'Check constraint failed ''CK_CONSTRAINT_01'': X<=5'
...
-- Can't drop table with check constraints.
box.space.test:delete({5})
---
- [5]
...
box.space.test.index.pk:drop()
---
...
box.space._space:delete({513})
---
- error: 'Can''t drop space ''test'': the space has check constraints'
...
box.space._ck_constraint:delete({513, 'CK_CONSTRAINT_01'})
---
- [513, 'CK_CONSTRAINT_01', false, 'SQL', 'X<=5', true]
...
box.space._space:delete({513})
---
- [513, 1, 'test', 'memtx', 0, {'checks': [{'expr': 'X>5'}]}, [{'name': 'X', 'type': 'unsigned'}]]
...
-- Create table with checks in sql.
box.execute("CREATE TABLE t1(x INTEGER CONSTRAINT ONE CHECK( x<5 ), y NUMBER CONSTRAINT TWO CHECK( y>x ), z INTEGER PRIMARY KEY);")
---
- row_count: 1
...
box.space._ck_constraint:count()
---
- 2
...
box.execute("INSERT INTO t1 VALUES (7, 1, 1)")
---
- null
- 'Check constraint failed ''ONE'': x<5'
...
box.space.T1:insert({7, 1, 1})
---
- error: 'Check constraint failed ''ONE'': x<5'
...
box.execute("INSERT INTO t1 VALUES (2, 1, 1)")
---
- null
- 'Check constraint failed ''TWO'': y>x'
...
box.space.T1:insert({2, 1, 1})
---
- error: 'Check constraint failed ''TWO'': y>x'
...
box.execute("INSERT INTO t1 VALUES (2, 4, 1)")
---
- row_count: 1
...
box.space.T1:update({1}, {{'+', 1, 5}})
---
- error: 'Check constraint failed ''ONE'': x<5'
...
box.execute("DROP TABLE t1")
---
- row_count: 1
...
-- Test space creation rollback on spell error in ck constraint.
box.execute("CREATE TABLE first (id NUMBER PRIMARY KEY CHECK(id < 5), a INT CONSTRAINT ONE CHECK(a >< 5));")
---
- null
- Syntax error at line 1 near '<'
...
box.space.FIRST == nil
---
- true
...
box.space._ck_constraint:count() == 0
---
- true
...
-- Ck constraints are disallowed for spaces having no format.
s = box.schema.create_space('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
_ = box.space._ck_constraint:insert({s.id, 'physics', false, 'SQL', 'X<Y', true})
---
- error: Tarantool does not support CK constraint for space without format
...
s:format({{name='X', type='integer'}, {name='Y', type='integer'}})
---
...
_ = box.space._ck_constraint:insert({s.id, 'physics', false, 'SQL', 'X<Y', true})
---
...
box.execute("INSERT INTO \"test\" VALUES(2, 1);")
---
- null
- 'Check constraint failed ''physics'': X<Y'
...
s:format({{name='Y', type='integer'}, {name='X', type='integer'}})
---
...
box.execute("INSERT INTO \"test\" VALUES(1, 2);")
---
- null
- 'Check constraint failed ''physics'': X<Y'
...
box.execute("INSERT INTO \"test\" VALUES(2, 1);")
---
- row_count: 1
...
s:truncate()
---
...
box.execute("INSERT INTO \"test\" VALUES(1, 2);")
---
- null
- 'Check constraint failed ''physics'': X<Y'
...
s:format({})
---
- error: Tarantool does not support CK constraint for space without format
...
s:format()
---
- [{'name': 'Y', 'type': 'integer'}, {'name': 'X', 'type': 'integer'}]
...
s:format({{name='Y1', type='integer'}, {name='X1', type='integer'}})
---
- error: 'Failed to create check constraint ''physics'': Canâ€™t resolve field ''X'''
...
-- Ck constraint creation is forbidden for non-empty space
s:insert({2, 1})
---
- [2, 1]
...
_ = box.space._ck_constraint:insert({s.id, 'conflict', false, 'SQL', 'X>10', true})
---
- error: 'Failed to create check constraint ''conflict'': referencing space must be
    empty'
...
s:truncate()
---
...
_ = box.space._ck_constraint:insert({s.id, 'conflict', false, 'SQL', 'X>10', true})
---
...
box.execute("INSERT INTO \"test\" VALUES(1, 2);")
---
- null
- 'Check constraint failed ''conflict'': X>10'
...
box.execute("INSERT INTO \"test\" VALUES(11, 11);")
---
- null
- 'Check constraint failed ''physics'': X<Y'
...
box.execute("INSERT INTO \"test\" VALUES(12, 11);")
---
- row_count: 1
...
s:drop()
---
...
box.execute("CREATE TABLE T2(ID INT PRIMARY KEY, CONSTRAINT CK1 CHECK(ID > 0), CONSTRAINT CK1 CHECK(ID < 0))")
---
- null
- CHECK constraint 'CK1' already exists in space 'T2'
...
box.space.T2
---
- null
...
box.space._ck_constraint:select()
---
- []
...
--
-- gh-3611: Segfault on table creation with check referencing this table
--
box.execute("CREATE TABLE w2 (s1 INT PRIMARY KEY, CHECK ((SELECT COUNT(*) FROM w2) = 0));")
---
- null
- 'Failed to create check constraint ''ck_unnamed_W2_1'': Subqueries are prohibited
  in a ck constraint definition'
...
box.execute("DROP TABLE w2;")
---
- null
- Space 'W2' does not exist
...
--
-- gh-3653: Dissallow bindings for DDL
--
box.execute("CREATE TABLE t5(x INT PRIMARY KEY, y INT, CHECK( x*y < ? ));")
---
- null
- 'Failed to create check constraint ''ck_unnamed_T5_1'': At line 1 at or near position
  8: bindings are not allowed in DDL'
...
-- Test trim CK constraint code correctness.
box.execute("CREATE TABLE t1(x TEXT PRIMARY KEY CHECK(x    LIKE     '1  a'))")
---
- row_count: 1
...
box.space._ck_constraint:select()[1].code
---
- x LIKE '1  a'
...
box.execute("INSERT INTO t1 VALUES('1 a')")
---
- null
- 'Check constraint failed ''ck_unnamed_T1_1'': x LIKE ''1  a'''
...
box.execute("INSERT INTO t1 VALUES('1   a')")
---
- null
- 'Check constraint failed ''ck_unnamed_T1_1'': x LIKE ''1  a'''
...
box.execute("INSERT INTO t1 VALUES('1  a')")
---
- row_count: 1
...
box.execute("DROP TABLE t1")
---
- row_count: 1
...
--
-- Test binding reset on new insertion
--
s = box.schema.create_space('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
s:format({{name='X', type='any'}, {name='Y', type='integer'}, {name='Z', type='integer', is_nullable=true}})
---
...
ck_not_null = box.space._ck_constraint:insert({s.id, 'ZnotNULL', false, 'SQL', 'X = 1 AND Z IS NOT NULL', true})
---
...
s:insert({2, 1})
---
- error: 'Check constraint failed ''ZnotNULL'': X = 1 AND Z IS NOT NULL'
...
s:insert({1, 1})
---
- error: 'Check constraint failed ''ZnotNULL'': X = 1 AND Z IS NOT NULL'
...
s:insert({1, 1, box.NULL})
---
- error: 'Check constraint failed ''ZnotNULL'': X = 1 AND Z IS NOT NULL'
...
s:insert({2, 1, 3})
---
- error: 'Check constraint failed ''ZnotNULL'': X = 1 AND Z IS NOT NULL'
...
s:insert({1, 1})
---
- error: 'Check constraint failed ''ZnotNULL'': X = 1 AND Z IS NOT NULL'
...
s:insert({1, 1, 3})
---
- [1, 1, 3]
...
s:drop()
---
...
--
-- Test ck constraint corner cases
--
s = box.schema.create_space('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
s:format({{name='X', type='any'}, {name='Y', type='integer'}, {name='Z', type='integer', is_nullable=true}})
---
...
ck_not_null = box.space._ck_constraint:insert({s.id, 'ZnotNULL', false, 'SQL', 'Z IS NOT NULL', true})
---
...
s:insert({1, 2, box.NULL})
---
- error: 'Check constraint failed ''ZnotNULL'': Z IS NOT NULL'
...
s:insert({1, 2})
---
- error: 'Check constraint failed ''ZnotNULL'': Z IS NOT NULL'
...
_ = box.space._ck_constraint:delete({s.id, 'ZnotNULL'})
---
...
_ = box.space._ck_constraint:insert({s.id, 'XlessY', false, 'SQL', 'X < Y and Y < Z', true})
---
...
s:insert({'1', 2})
---
- error: 'Tuple field 1 (X) type does not match one required by operation: expected
    unsigned, got number'
...
s:insert({})
---
- error: Tuple field 1 (X) required by space format is missing
...
s:insert({2, 1})
---
- error: 'Check constraint failed ''XlessY'': X < Y and Y < Z'
...
s:insert({1, 2})
---
- [1, 2]
...
s:insert({2, 3, 1})
---
- error: 'Check constraint failed ''XlessY'': X < Y and Y < Z'
...
s:insert({2, 3, 4})
---
- [2, 3, 4]
...
s:update({2}, {{'+', 2, 3}})
---
- error: 'Check constraint failed ''XlessY'': X < Y and Y < Z'
...
s:update({2}, {{'+', 2, 3}, {'+', 3, 3}})
---
- [2, 6, 7]
...
s:replace({2, 1, 3})
---
- error: 'Check constraint failed ''XlessY'': X < Y and Y < Z'
...
box.snapshot()
---
- ok
...
s = box.space["test"]
---
...
s:update({2}, {{'+', 2, 3}})
---
- error: 'Check constraint failed ''XlessY'': X < Y and Y < Z'
...
s:update({2}, {{'+', 2, 3}, {'+', 3, 3}})
---
- [2, 9, 10]
...
s:replace({2, 1, 3})
---
- error: 'Check constraint failed ''XlessY'': X < Y and Y < Z'
...
s:drop()
---
...
--
-- Test complex CHECK constraints.
--
s = box.schema.create_space('test', {engine = engine})
---
...
s:format({{name='X', type='integer'}, {name='Y', type='integer'}, {name='Z', type='integer'}})
---
...
_ = s:create_index('pk', {parts = {3, 'integer'}})
---
...
_ = s:create_index('unique', {parts = {1, 'integer'}})
---
...
_ = box.space._ck_constraint:insert({s.id, 'complex1', false, 'SQL', 'x+y==11 OR x*y==12 OR x/y BETWEEN 5 AND 8 OR -x == y+10', true})
---
...
s:insert({1, 10, 1})
---
- [1, 10, 1]
...
s:update({1}, {{'=', 1, 4}, {'=', 2, 3}})
---
- [4, 3, 1]
...
s:update({1}, {{'=', 1, 12}, {'=', 2, 2}})
---
- [12, 2, 1]
...
s:update({1}, {{'=', 1, 12}, {'=', 2, -22}})
---
- [12, -22, 1]
...
s:update({1}, {{'=', 1, 0}, {'=', 2, 1}})
---
- error: 'Check constraint failed ''complex1'': x+y==11 OR x*y==12 OR x/y BETWEEN
    5 AND 8 OR -x == y+10'
...
s:get({1})
---
- [12, -22, 1]
...
s:update({1}, {{'=', 1, 0}, {'=', 2, 2}})
---
- error: 'Check constraint failed ''complex1'': x+y==11 OR x*y==12 OR x/y BETWEEN
    5 AND 8 OR -x == y+10'
...
s:get({1})
---
- [12, -22, 1]
...
s:drop()
---
...
s = box.schema.create_space('test', {engine = engine})
---
...
s:format({{name='X', type='integer'}, {name='Z', type='any'}})
---
...
_ = s:create_index('pk', {parts = {1, 'integer'}})
---
...
_ = box.space._ck_constraint:insert({s.id, 'complex2', false, 'SQL', 'typeof(coalesce(z,0))==\'integer\'', true})
---
...
s:insert({1, 'string'})
---
- error: 'Check constraint failed ''complex2'': typeof(coalesce(z,0))==''integer'''
...
s:insert({1, {map=true}})
---
- error: 'Check constraint failed ''complex2'': typeof(coalesce(z,0))==''integer'''
...
s:insert({1, {'a', 'r','r','a','y'}})
---
- error: 'Check constraint failed ''complex2'': typeof(coalesce(z,0))==''integer'''
...
s:insert({1, 3.14})
---
- error: 'Check constraint failed ''complex2'': typeof(coalesce(z,0))==''integer'''
...
s:insert({1, 666})
---
- [1, 666]
...
s:drop()
---
...
--
-- Test large tuple.
--
s = box.schema.create_space('test')
---
...
_ = s:create_index('pk', {parts = {1, 'integer'}})
---
...
format65 = {}
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for i = 1,66 do
        table.insert(format65, {name='X'..i, type='integer', is_nullable = true})
end
test_run:cmd("setopt delimiter ''");
---
...
s:format(format65)
---
...
_ = box.space._ck_constraint:insert({s.id, 'X1is666andX65is666', false, 'SQL', 'X1 == 666 and X65 == 666 and X63 IS NOT NULL', true})
---
...
s:insert(s:frommap({X1 = 1, X65 = 1}))
---
- error: 'Check constraint failed ''X1is666andX65is666'': X1 == 666 and X65 == 666
    and X63 IS NOT NULL'
...
s:insert(s:frommap({X1 = 666, X65 = 1}))
---
- error: 'Check constraint failed ''X1is666andX65is666'': X1 == 666 and X65 == 666
    and X63 IS NOT NULL'
...
s:insert(s:frommap({X1 = 1, X65 = 666}))
---
- error: 'Check constraint failed ''X1is666andX65is666'': X1 == 666 and X65 == 666
    and X63 IS NOT NULL'
...
s:insert(s:frommap({X1 = 666, X65 = 666}))
---
- error: 'Check constraint failed ''X1is666andX65is666'': X1 == 666 and X65 == 666
    and X63 IS NOT NULL'
...
s:insert(s:frommap({X1 = 666, X65 = 666, X63 = 1}))
---
- [666, null, null, null, null, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, null, 1, null, 666]
...
s:drop()
---
...
--
-- Test ck constraints LUA integration.
--
s1 = box.schema.create_space('test1')
---
...
_ = s1:create_index('pk')
---
...
s1:format({{name='X', type='any'}, {name='Y', type='integer'}})
---
...
s2 = box.schema.create_space('test2')
---
...
_ = s2:create_index('pk')
---
...
s2:format({{name='X', type='any'}, {name='Y', type='integer'}})
---
...
test_run:cmd("push filter 'space_id: [0-9]+' to 'space_id: <ID>'")
---
- true
...
_ = s1:create_check_constraint('physics', 'X < Y')
---
...
_ = s1:create_check_constraint('physics', 'X > Y')
---
- error: Duplicate key exists in unique index 'primary' in space '_ck_constraint'
...
_ = s1:create_check_constraint('greater', 'X > 20')
---
...
_ = s2:create_check_constraint('physics', 'X > Y')
---
...
_ = s2:create_check_constraint('greater', 'X > 20')
---
...
s1.ck_constraint.physics
---
- space_id: <ID>
  is_enabled: true
  name: physics
  expr: X < Y
...
s1.ck_constraint.greater
---
- space_id: <ID>
  is_enabled: true
  name: greater
  expr: X > 20
...
s2.ck_constraint.physics
---
- space_id: <ID>
  is_enabled: true
  name: physics
  expr: X > Y
...
s2.ck_constraint.greater
---
- space_id: <ID>
  is_enabled: true
  name: greater
  expr: X > 20
...
s1:insert({2, 1})
---
- error: 'Check constraint failed ''greater'': X > 20'
...
s1:insert({21, 20})
---
- error: 'Check constraint failed ''physics'': X < Y'
...
s2:insert({1, 2})
---
- error: 'Check constraint failed ''greater'': X > 20'
...
s2:insert({21, 22})
---
- error: 'Check constraint failed ''physics'': X > Y'
...
s2.ck_constraint.greater:drop()
---
...
s2.ck_constraint.physics
---
- space_id: <ID>
  is_enabled: true
  name: physics
  expr: X > Y
...
s2.ck_constraint.greater
---
- null
...
s1:insert({2, 1})
---
- error: 'Check constraint failed ''greater'': X > 20'
...
s2:insert({1, 2})
---
- error: 'Check constraint failed ''physics'': X > Y'
...
s2:insert({2, 1})
---
- [2, 1]
...
physics_ck = s2.ck_constraint.physics
---
...
s1:drop()
---
...
s2:drop()
---
...
physics_ck
---
- space_id: <ID>
  is_enabled: true
  name: physics
  expr: X > Y
...
physics_ck:drop()
---
...
--
-- gh-4244: Add an ability to disable CK constraints
-- Make sure that ck constraints are turned on/off with
-- :enable configurator.
--
box.execute("CREATE TABLE test(a INT PRIMARY KEY);");
---
- row_count: 1
...
box.execute('ALTER TABLE test ADD CONSTRAINT CK CHECK(a < 5);')
---
- row_count: 1
...
box.space.TEST:insert({10})
---
- error: 'Check constraint failed ''CK'': a < 5'
...
box.space.TEST.ck_constraint.CK:enable(false)
---
...
assert(box.space.TEST.ck_constraint.CK.is_enabled == false)
---
- true
...
box.space.TEST:insert({11})
---
- [11]
...
-- Test is_enabled state persistency.
test_run:cmd("restart server default")
test_run = require('test_run').new()
---
...
test_run:cmd("push filter ".."'\\.lua.*:[0-9]+: ' to '.lua...\"]:<line>: '")
---
- true
...
box.space.TEST:insert({12})
---
- [12]
...
box.space.TEST.ck_constraint.CK:enable(true)
---
...
assert(box.space.TEST.ck_constraint.CK.is_enabled == true)
---
- true
...
box.space.TEST:insert({13})
---
- error: 'Check constraint failed ''CK'': a < 5'
...
box.space.TEST:drop()
---
...
--
-- Test ENABLE/DISABLE CK constraints from SQL works.
--
box.execute("ALTER TABLE falsch DISABLE CHECK CONSTRAINT \"some_ck\"")
---
- null
- Space 'FALSCH' does not exist
...
box.execute("CREATE TABLE test(a INT PRIMARY KEY);");
---
- row_count: 1
...
box.execute('ALTER TABLE test ADD CONSTRAINT \"some_ck\" CHECK(a < 10);')
---
- row_count: 1
...
box.execute("ALTER TABLE test DISABLE CHECK CONSTRAINT \"falsch\"")
---
- null
- Constraint 'falsch' does not exist in space 'TEST'
...
box.execute("ALTER TABLE test DISABLE CHECK CONSTRAINT \"some_ck\"")
---
- row_count: 0
...
assert(box.space.TEST.ck_constraint.some_ck.is_enabled == false)
---
- true
...
box.space.TEST:insert({11})
---
- [11]
...
box.execute("ALTER TABLE test ENABLE CHECK CONSTRAINT \"some_ck\"")
---
- row_count: 0
...
assert(box.space.TEST.ck_constraint.some_ck.is_enabled == true)
---
- true
...
box.space.TEST:insert({12})
---
- error: 'Check constraint failed ''some_ck'': a < 10'
...
box.execute("DROP TABLE test;")
---
- row_count: 1
...
--
-- gh-4176: Can't recover if check constraint involves function.
--
function MYFUNC(x) return x < 10 end
---
...
box.schema.func.create('MYFUNC', {param_list = {'integer'}, returns = 'integer', is_deterministic = true, exports = {'LUA', 'SQL'}})
---
...
box.execute("CREATE TABLE t6(a  INT CHECK (myfunc(a)) primary key);");
---
- row_count: 1
...
box.func.MYFUNC:drop()
---
...
box.execute("INSERT INTO t6 VALUES(11);");
---
- null
- Function 'MYFUNC' does not exist
...
box.execute("DROP TABLE t6")
---
- row_count: 1
...
--
-- gh-3075: Check the auto naming of CHECK constraints in
-- <ALTER TABLE ADD COLUMN>.
--
box.execute("CREATE TABLE check_naming (a INT PRIMARY KEY CHECK (a > 0))")
---
- row_count: 1
...
box.execute("ALTER TABLE check_naming ADD b INT CHECK (b > 0)")
---
- row_count: 1
...
box.execute("ALTER TABLE check_naming DROP CONSTRAINT \"ck_unnamed_CHECK_NAMING_2\"")
---
- row_count: 1
...
box.execute("DROP TABLE check_naming")
---
- row_count: 1
...
test_run:cmd("clear filter")
---
- true
...
